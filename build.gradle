apply plugin: 'distribution'
apply plugin: 'net.researchgate.release'
apply plugin: 'co.riiid.gradle'

import groovy.text.GStringTemplateEngine
import org.codehaus.groovy.runtime.DateGroovyMethods

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.7'
        classpath 'net.researchgate:gradle-release:2.2.2'
        classpath 'co.riiid:gradle-github-plugin:0.3.1'
    }
}

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'net.saliman.cobertura'

    ["githubToken", "ossrhUsername", "ossrhPassword",
     "signing.keyId", "signing.password", "signing.secretKeyRingFile",].each {checkAndDefaultProperty(it)}

    ext.set("unsnapshottedVersion", version.replaceAll("-SNAPSHOT", ""))
    ext.set("samples", project(":samples").subprojects.collect {it.path})

    repositories {
        jcenter()
    }

    dependencies {
        compile 'org.slf4j:slf4j-log4j12:1.7.5'
    }

    checkstyle {
        toolVersion = "6.4.1"
    }

    cobertura {
        coverageFormats = ['html', 'xml']
        coverageIgnoreTrivial = true
        coverageCheckTotalLineRate = 100
        coverageCheckTotalBranchRate = 100
    }

    task checkstyleMain(type: Checkstyle, overwrite: true) {
        configFile = new File("{$project.projectDir}/config/checkstyle/checkstyle-main.xml")
    }

    task checkstyleTest(type: Checkstyle, overwrite: true) {
        configFile = new File("{$project.projectDir}/config/checkstyle/checkstyle-test.xml")
    }
}

def generateReleaseNotes() {
    def changelogSnippet = generateChangelogSnippet()
    def model = [title: "Uber Rides API Java SDK (Beta) v${unsnapshottedVersion}",
                 date: DateGroovyMethods.format(new Date(), 'MM/dd/yyyy'),
                 snippet: changelogSnippet,
                 assets: project.samples.collect {[
                         title: project(it).name,
                         download: githubDownloadPrefix + "v${unsnapshottedVersion}/"
                                 + project(it).name + "-v${unsnapshottedVersion}.zip",
                         description: project(it).description,
                 ]}]
    def engine = new GStringTemplateEngine()
    def template = engine.createTemplate(new File('releasenotes.gtpl')).make(model)
    return template.toString()
}

def generateChangelogSnippet() {
    def changelog = new File('CHANGELOG.md').text
    def snippet = ""
    def stop = false
    changelog.eachLine {line, count ->
        if (count >= 2) {
            stop = stop || line.startsWith("v");
            if (!stop) {
                snippet += line + "\n";
            }
        }
    }
    return "  " + snippet.trim();
}

def checkAndDefaultProperty(prop) {
    if (!project.hasProperty(prop)) {
        logger.warn("Add " + prop + " to your ~/.gradle/grade.properties file.")
        rootProject.ext.set(prop, prop)
    }
}

def checkForChangelogUpdates() {
    def changelogtext = rootProject.file('CHANGELOG.MD').text
    if (!changelogtext.startsWith("v${unsnapshottedVersion} -")) {
        throw new AssertionError(
                "Changelog must be updated with v{$unsnapshottedVersion} before release. Please check " +
                        rootProject.file('CHANGELOG.MD').absolutePath)
    }
}

def checkForSecrets(prject) {
    def secretsText = prject.file('src/main/resources/secrets.properties').text
    def expectedText = "clientId=INSERT_CLIENT_ID_HERE\nclientSecret=INSERT_CLIENT_SECRET_HERE"
    if (secretsText != expectedText) {
        throw new AssertionError("Secrets may be exposed. Please check " +
                prject.file('src/main/resources/secrets.properties').absolutePath)
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.path.endsWith("release") || task.path.endsWith("githubReleaseZip")
            || task.path.endsWith("publicrepoDistZip")) {
        checkForChangelogUpdates()
        for (prject in project(":samples").subprojects) {
            checkForSecrets(prject)
        }
    }
}

afterReleaseBuild.dependsOn ":sdk:uploadArchives"
updateVersion.dependsOn ":githubRelease"
githubRelease.dependsOn project(":samples").subprojects.collect {it.path + ":githubReleaseZip"}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    revertOnFail = true
    tagTemplate = "v${unsnapshottedVersion}"
}

github {
    owner = 'uber'
    repo = 'rides-java-sdk'
    token = "${githubToken}"
    tagName = "v${unsnapshottedVersion}"
    targetCommitish = 'master'
    name = "v${unsnapshottedVersion}"
    body = generateReleaseNotes()
    assets = project.samples.collect {
        project(it).buildDir.absolutePath + "/distributions/" + project(it).name +
                "-v${unsnapshottedVersion}.zip"
    }
}

distributions {
    publicrepo {
        baseName = 'publicrepo'
        contents {
            from(rootDir) {
                include 'build.gradle'
                include 'CHANGELOG.md'
                include 'gradle.properties'
                include 'gradlew'
                include 'gradlew.bat'
                include 'LICENSE'
                include 'releasenotes.gtpl'
                include 'settings.gradle'
                include 'gradle/'
            }

            from(rootDir) {
                include 'README.md'
                filter { String line ->
                    line.replaceAll("@version@", unsnapshottedVersion)
                }
            }

            from('sdk') {
                filter { String line ->
                    line.replaceAll("@version@", unsnapshottedVersion)
                }
                exclude 'build'
                exclude '*.iml'
                into 'sdk'
            }

            from('samples') {
                exclude '**/build'
                exclude '**/*.iml'
                into 'samples'
            }
        }
    }
}
