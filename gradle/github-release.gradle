/*
 * Copyright (C) 2017. Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.text.GStringTemplateEngine
import org.codehaus.groovy.runtime.DateGroovyMethods

apply plugin: 'net.researchgate.release'
apply plugin: 'co.riiid.gradle'

ext.set('unsnapshottedVersion', VERSION_NAME.replaceAll('-SNAPSHOT', ''))
ext.set('samples', project(':samples').subprojects.collect { it.path })
ext.set('isReleaseVersion', !VERSION_NAME.endsWith('SNAPSHOT'))

['githubToken', 'ossrhUsername', 'ossrhPassword',
 'signing.keyId', 'signing.password', 'signing.secretKeyRingFile',].each {
    checkAndDefaultProperty(it)
}

def generateReleaseNotes() {
    def changelogSnippet = generateChangelogSnippet()
    def model = [title  : "Uber Rides API Java SDK (Beta) v${unsnapshottedVersion}",
                 date   : DateGroovyMethods.format(new Date(), 'MM/dd/yyyy'),
                 snippet: changelogSnippet,
                 assets : project.samples.collect {
                     [
                             title      : project(it).name,
                             download   : githubDownloadPrefix + "v${unsnapshottedVersion}/"
                                     + project(it).name + "-v${unsnapshottedVersion}.zip",
                             description: project(it).description,
                     ]
                 }]
    def engine = new GStringTemplateEngine()
    def template = engine.createTemplate(rootProject.file('releasenotes.gtpl')).make(model)
    return template.toString()
}

def generateChangelogSnippet() {
    def changelog = rootProject.file('CHANGELOG.md').text
    def snippet = ""
    def stop = false
    changelog.eachLine { line, count ->
        if (count >= 2) {
            stop = stop || line.startsWith("v");
            if (!stop) {
                snippet += line + "\n";
            }
        }
    }
    return "  " + snippet.trim();
}

def checkAndDefaultProperty(prop) {
    if (!project.hasProperty(prop)) {
        logger.warn('Add ' + prop + ' to your ~/.gradle/gradle.properties file.')
        rootProject.ext.set(prop, prop)
    }
}

def checkForChangelogUpdates(task) {
    def changelogtext = rootProject.file('CHANGELOG.md').text
    if (!changelogtext.startsWith("v${unsnapshottedVersion} -")) {
        throw new AssertionError(
                "Changelog must be updated with v{$unsnapshottedVersion} before release. Please check " +
                        rootProject.file('CHANGELOG.md').absolutePath)
    }
}

def checkForSecrets(prject) {
    def secretsText = prject.file('src/main/resources/secrets.properties').text
    def expectedText = 'clientId=INSERT_CLIENT_ID_HERE\nclientSecret=INSERT_CLIENT_SECRET_HERE'
    if (secretsText != expectedText) {
        throw new AssertionError('Secrets may be exposed. Please check ' +
                prject.file('src/main/resources/secrets.properties').absolutePath)
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.path.endsWith('release') || task.path.endsWith('githubReleaseZip')
            || task.path.endsWith('publicrepoDistZip')) {
        checkForChangelogUpdates(task)
        for (prject in project(':samples').subprojects) {
            checkForSecrets(prject)
        }
    }
}

// Skip signing archives on Jenkins when -SNAPSHOT is being checked in.
gradle.taskGraph.beforeTask { Task task ->
    if (task.path.contains('sign') && !ext.isReleaseVersion) {
        task.enabled = false
    }
}

task updateChangelog() << {
    def newVersion = findProperty("version").replaceAll('-SNAPSHOT', '')
    def changelog = rootProject.file('CHANGELOG.md')
    def changelogText = changelog.text
    if (!changelogText.startsWith("v${newVersion} -")) {
        def updatedChangelog = "v${newVersion} - TBD\n"
        def dashesCount = updatedChangelog.length()-1
        updatedChangelog += "-"*dashesCount + "\n\n"

        changelog.write(updatedChangelog + changelogText)
    }
}

afterReleaseBuild.dependsOn (   ':uber-core:uploadArchives',
        ':uber-core-oauth-client-adapter:uploadArchives',
        ':uber-rides:uploadArchives')
updateVersion.dependsOn ':githubRelease'
commitNewVersion.dependsOn ':updateChangelog'
githubRelease.dependsOn project(':samples').subprojects.collect { it.path + ':githubReleaseZip' }

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    revertOnFail = true
    tagTemplate = "v${unsnapshottedVersion}"
}

github {
    owner = GITHUB_OWNER
    repo = GITHUB_REPO
    token = "${githubToken}"
    tagName = "v${unsnapshottedVersion}"
    targetCommitish = GITHUB_BRANCH
    name = "v${unsnapshottedVersion}"
    body = generateReleaseNotes()
    assets = project.samples.collect {
        project(it).buildDir.absolutePath + '/distributions/' + project(it).name +
                "-v${unsnapshottedVersion}.zip"
    }
}

subprojects {
    configure(subprojects.findAll {it.parent.name == 'samples'}) {
        task githubReleaseZip(type: Zip, dependsOn: "install") << {
            version = "v${unsnapshottedVersion}"

            from('.') {
                filter { String line ->
                    line.replaceAll("compile project\\(':uber-core'\\)",
                            "compile '${groupId}:uber-core:${unsnapshottedVersion}'")
                }
                filter { String line ->
                    line.replaceAll("compile project\\(':uber-core-oauth-client-adapter'\\)",
                            "compile '${groupId}:uber-core-oauth-client-adapter:${unsnapshottedVersion}'")
                }

                filter { String line ->
                    line.replaceAll("compile project\\(':uber-rides'\\)",
                            "compile '${groupId}:uber-rides:${unsnapshottedVersion}'")
                }
                into '.'
                exclude 'build'
                exclude '*.iml'
            }

            from(rootProject.projectDir.absolutePath) {
                include 'gradle/'
                include 'gradlew'
                include 'gradlew.bat'
                include 'LICENSE'
                into '.'
            }

            from('build/poms') {
                include 'pom-default.xml'
                rename { String fileName ->
                    fileName.replaceAll('-default', '')
                }
                filter { String line ->
                    line.replaceAll('-SNAPSHOT', '')
                }
                into '.'
            }
        }
    }
}
